// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Bcrypt is an autogenerated mock type for the Bcrypt type
type Bcrypt struct {
	mock.Mock
}

// CompareHashAndPassword provides a mock function with given fields: _a0, _a1
func (_m *Bcrypt) CompareHashAndPassword(_a0 []byte, _a1 []byte) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CompareHashAndPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateFromPassword provides a mock function with given fields: _a0, _a1
func (_m *Bcrypt) GenerateFromPassword(_a0 []byte, _a1 int) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GenerateFromPassword")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, int) ([]byte, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func([]byte, int) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultCost provides a mock function with given fields:
func (_m *Bcrypt) GetDefaultCost() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultCost")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewBcrypt creates a new instance of Bcrypt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBcrypt(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bcrypt {
	mock := &Bcrypt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
