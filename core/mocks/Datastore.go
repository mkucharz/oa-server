// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	types "github.com/openaccounting/oa-server/core/model/types"
)

// Datastore is an autogenerated mock type for the Datastore type
type Datastore struct {
	mock.Mock
}

// AcceptInvite provides a mock function with given fields: _a0, _a1
func (_m *Datastore) AcceptInvite(_a0 *types.Invite, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Invite, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddBalance provides a mock function with given fields: _a0, _a1
func (_m *Datastore) AddBalance(_a0 *types.Account, _a1 time.Time) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Account, time.Time) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddBalances provides a mock function with given fields: _a0, _a1
func (_m *Datastore) AddBalances(_a0 []*types.Account, _a1 time.Time) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddBalances")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*types.Account, time.Time) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNativeBalanceCost provides a mock function with given fields: _a0, _a1
func (_m *Datastore) AddNativeBalanceCost(_a0 *types.Account, _a1 time.Time) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddNativeBalanceCost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Account, time.Time) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNativeBalanceNearestInTime provides a mock function with given fields: _a0, _a1
func (_m *Datastore) AddNativeBalanceNearestInTime(_a0 *types.Account, _a1 time.Time) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddNativeBalanceNearestInTime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Account, time.Time) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNativeBalancesCost provides a mock function with given fields: _a0, _a1
func (_m *Datastore) AddNativeBalancesCost(_a0 []*types.Account, _a1 time.Time) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddNativeBalancesCost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*types.Account, time.Time) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNativeBalancesNearestInTime provides a mock function with given fields: _a0, _a1
func (_m *Datastore) AddNativeBalancesNearestInTime(_a0 []*types.Account, _a1 time.Time) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddNativeBalancesNearestInTime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*types.Account, time.Time) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrg provides a mock function with given fields: _a0, _a1, _a2
func (_m *Datastore) CreateOrg(_a0 *types.Org, _a1 string, _a2 []*types.Account) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Org, string, []*types.Account) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccount provides a mock function with given fields: id
func (_m *Datastore) DeleteAccount(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAndInsertTransaction provides a mock function with given fields: _a0, _a1
func (_m *Datastore) DeleteAndInsertTransaction(_a0 string, _a1 *types.Transaction) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAndInsertTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *types.Transaction) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteApiKey provides a mock function with given fields: _a0, _a1
func (_m *Datastore) DeleteApiKey(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBudget provides a mock function with given fields: _a0
func (_m *Datastore) DeleteBudget(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBudget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInvite provides a mock function with given fields: _a0
func (_m *Datastore) DeleteInvite(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePrice provides a mock function with given fields: _a0
func (_m *Datastore) DeletePrice(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSession provides a mock function with given fields: _a0, _a1
func (_m *Datastore) DeleteSession(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTransaction provides a mock function with given fields: _a0
func (_m *Datastore) DeleteTransaction(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Escape provides a mock function with given fields: _a0
func (_m *Datastore) Escape(_a0 string) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Escape")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAccount provides a mock function with given fields: _a0
func (_m *Datastore) GetAccount(_a0 string) (*types.Account, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *types.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Account, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Account); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsByOrgId provides a mock function with given fields: orgId
func (_m *Datastore) GetAccountsByOrgId(orgId string) ([]*types.Account, error) {
	ret := _m.Called(orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountsByOrgId")
	}

	var r0 []*types.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*types.Account, error)); ok {
		return rf(orgId)
	}
	if rf, ok := ret.Get(0).(func(string) []*types.Account); ok {
		r0 = rf(orgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiKeys provides a mock function with given fields: _a0
func (_m *Datastore) GetApiKeys(_a0 string) ([]*types.ApiKey, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetApiKeys")
	}

	var r0 []*types.ApiKey
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*types.ApiKey, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*types.ApiKey); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.ApiKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBudget provides a mock function with given fields: _a0
func (_m *Datastore) GetBudget(_a0 string) (*types.Budget, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBudget")
	}

	var r0 *types.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Budget, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Budget); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildCountByAccountId provides a mock function with given fields: id
func (_m *Datastore) GetChildCountByAccountId(id string) (int64, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetChildCountByAccountId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvite provides a mock function with given fields: _a0
func (_m *Datastore) GetInvite(_a0 string) (*types.Invite, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetInvite")
	}

	var r0 *types.Invite
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Invite, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Invite); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Invite)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvites provides a mock function with given fields: _a0
func (_m *Datastore) GetInvites(_a0 string) ([]*types.Invite, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetInvites")
	}

	var r0 []*types.Invite
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*types.Invite, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*types.Invite); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Invite)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: _a0, _a1
func (_m *Datastore) GetOrg(_a0 string, _a1 string) (*types.Org, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrg")
	}

	var r0 *types.Org
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*types.Org, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) *types.Org); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Org)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrgAdmins provides a mock function with given fields: _a0
func (_m *Datastore) GetOrgAdmins(_a0 string) ([]*types.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgAdmins")
	}

	var r0 []*types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*types.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*types.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrgUserIds provides a mock function with given fields: _a0
func (_m *Datastore) GetOrgUserIds(_a0 string) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgUserIds")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrgs provides a mock function with given fields: _a0
func (_m *Datastore) GetOrgs(_a0 string) ([]*types.Org, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgs")
	}

	var r0 []*types.Org
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*types.Org, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*types.Org); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Org)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionedAccountIds provides a mock function with given fields: _a0, _a1, _a2
func (_m *Datastore) GetPermissionedAccountIds(_a0 string, _a1 string, _a2 string) ([]string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionedAccountIds")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]string, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceById provides a mock function with given fields: _a0
func (_m *Datastore) GetPriceById(_a0 string) (*types.Price, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetPriceById")
	}

	var r0 *types.Price
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Price, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Price); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Price)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPricesByCurrency provides a mock function with given fields: _a0, _a1
func (_m *Datastore) GetPricesByCurrency(_a0 string, _a1 string) ([]*types.Price, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPricesByCurrency")
	}

	var r0 []*types.Price
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*types.Price, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*types.Price); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Price)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPricesNearestInTime provides a mock function with given fields: _a0, _a1
func (_m *Datastore) GetPricesNearestInTime(_a0 string, _a1 time.Time) ([]*types.Price, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPricesNearestInTime")
	}

	var r0 []*types.Price
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time) ([]*types.Price, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time) []*types.Price); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Price)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRootAccount provides a mock function with given fields: _a0
func (_m *Datastore) GetRootAccount(_a0 string) (*types.Account, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRootAccount")
	}

	var r0 *types.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Account, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Account); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSplitCountByAccountId provides a mock function with given fields: id
func (_m *Datastore) GetSplitCountByAccountId(id string) (int64, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSplitCountByAccountId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionById provides a mock function with given fields: _a0
func (_m *Datastore) GetTransactionById(_a0 string) (*types.Transaction, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionById")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Transaction, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Transaction); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByAccount provides a mock function with given fields: _a0, _a1
func (_m *Datastore) GetTransactionsByAccount(_a0 string, _a1 *types.QueryOptions) ([]*types.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByAccount")
	}

	var r0 []*types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *types.QueryOptions) ([]*types.Transaction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, *types.QueryOptions) []*types.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *types.QueryOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByOrg provides a mock function with given fields: _a0, _a1, _a2
func (_m *Datastore) GetTransactionsByOrg(_a0 string, _a1 *types.QueryOptions, _a2 []string) ([]*types.Transaction, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByOrg")
	}

	var r0 []*types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *types.QueryOptions, []string) ([]*types.Transaction, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, *types.QueryOptions, []string) []*types.Transaction); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *types.QueryOptions, []string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByActiveSession provides a mock function with given fields: _a0
func (_m *Datastore) GetUserByActiveSession(_a0 string) (*types.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByActiveSession")
	}

	var r0 *types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *types.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByApiKey provides a mock function with given fields: _a0
func (_m *Datastore) GetUserByApiKey(_a0 string) (*types.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByApiKey")
	}

	var r0 *types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *types.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmailVerifyCode provides a mock function with given fields: _a0
func (_m *Datastore) GetUserByEmailVerifyCode(_a0 string) (*types.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmailVerifyCode")
	}

	var r0 *types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *types.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByResetCode provides a mock function with given fields: _a0
func (_m *Datastore) GetUserByResetCode(_a0 string) (*types.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByResetCode")
	}

	var r0 *types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *types.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVerifiedUserByEmail provides a mock function with given fields: _a0
func (_m *Datastore) GetVerifiedUserByEmail(_a0 string) (*types.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetVerifiedUserByEmail")
	}

	var r0 *types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *types.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAccount provides a mock function with given fields: account
func (_m *Datastore) InsertAccount(account *types.Account) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for InsertAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAndReplaceBudget provides a mock function with given fields: _a0
func (_m *Datastore) InsertAndReplaceBudget(_a0 *types.Budget) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertAndReplaceBudget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Budget) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertApiKey provides a mock function with given fields: _a0
func (_m *Datastore) InsertApiKey(_a0 *types.ApiKey) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertApiKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.ApiKey) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertInvite provides a mock function with given fields: _a0
func (_m *Datastore) InsertInvite(_a0 *types.Invite) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Invite) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertPrice provides a mock function with given fields: _a0
func (_m *Datastore) InsertPrice(_a0 *types.Price) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertPrice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Price) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertSession provides a mock function with given fields: _a0
func (_m *Datastore) InsertSession(_a0 *types.Session) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Session) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertTransaction provides a mock function with given fields: _a0
func (_m *Datastore) InsertTransaction(_a0 *types.Transaction) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Transaction) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertUser provides a mock function with given fields: _a0
func (_m *Datastore) InsertUser(_a0 *types.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *Datastore) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccount provides a mock function with given fields: account
func (_m *Datastore) UpdateAccount(account *types.Account) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateApiKey provides a mock function with given fields: _a0
func (_m *Datastore) UpdateApiKey(_a0 *types.ApiKey) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.ApiKey) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateApiKeyActivity provides a mock function with given fields: _a0
func (_m *Datastore) UpdateApiKeyActivity(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiKeyActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrg provides a mock function with given fields: _a0
func (_m *Datastore) UpdateOrg(_a0 *types.Org) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Org) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSessionActivity provides a mock function with given fields: _a0
func (_m *Datastore) UpdateSessionActivity(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSessionActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *Datastore) UpdateUser(_a0 *types.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserResetPassword provides a mock function with given fields: _a0
func (_m *Datastore) UpdateUserResetPassword(_a0 *types.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyUser provides a mock function with given fields: _a0
func (_m *Datastore) VerifyUser(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatastore creates a new instance of Datastore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatastore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Datastore {
	mock := &Datastore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
